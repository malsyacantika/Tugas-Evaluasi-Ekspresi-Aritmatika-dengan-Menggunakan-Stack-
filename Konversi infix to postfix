#include <iostream>
#include <vector>
#include <string>
#include <cctype>
#include <stack>

using namespace std;

vector<string> InfixToPostfix(const string& exp){
  vector<string> postfix;
  stack<string> oprs;

auto addOp =  [&postfix](const string& op){
  postfix.PushBack(op);
};

for(sizeT i=0; i<exp.size(); i++){
  char ch = exp [i];
  if(IsSpace(ch)){
    continue;
} else if (isdigit(ch)){
    string num(1, ch);
    while(i + 1 <exp.size()&&isdigit(exp[i++])){
    num += exp[i++];
}
  postfix.PushBack(num);
  } else {
    if (ch == '(' ){
    oprs.push(string(1,ch));
  }else if (ch == ')') {
    while(!oprs.empty() && oprs.top()! = "(" {
    addOp(oprs.top());
    oprs.pop();
} 
oprs.pop()
}else{
if((i == 0 || !isdigit(exp[i - 1]) || exp[i - 1] =='(') && ch == '-');
}else{
while(!oprs.empty() && oprs.top()!= "(" && prec(oprs.top()[0]) >= prec(ch)){
    addOp(oprs.top());
    oprs.pop();
oprs.push(string(1, ch));
}}}}
while (!oprs.empty()){
addOp(oprs.top());
    oprs.pop();
}
return postfix;
}
