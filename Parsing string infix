#include <iostream>
#include <vector> 
#include <string>
#include <cctype>
#include <stack>

using namespace std;

vector<string> parseInfix(const string &exp){
  vector<string> token;
  string num;
  for(size_t i=0;i<exp.size();++i){
  char ch = exp[i];
  if(isspace(ch)){
    continue;
  }
  if(isdigit(ch)){
    num+=ch;
  }else{
      if(!num.empty()){
          token.push_back(num);
          num.clear();
      }
      if(ch=='-'&&(i == 0 || exp[i-1] == '(' || exp [i-1] == '*' || exp[i-1]=='/' || exp[i-1] == '+' || exp [i-1] == '%' || exp[i-1] == '-')) {
        if (i+1<exp.size() && isdigit(exp[i+1])){
            num += ch;
        }else{
          token.push_back("-1");
          token.push_back("*");
        }
      }else if( ch == '-' && (token.empty() || token.back() == "(" || token.back() == "*" || token.back() == "+" || token.back == "-" || token.back() == "%")){
          token.push_back("-1");
          token.push_back("*");
        }else{
        }
    }
}
if(!num.empty()){  
    token.push_back(num);
  }
  return token;
}
